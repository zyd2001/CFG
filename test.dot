digraph "CFG for 'bitstring' function" {
	label="CFG for 'bitstring' function";

	Node0x56013c3d6f20 [shape=record,label="{bb.0.entry:\l  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)\l  liveins: $r15, $r12, $r13, $r14, $r10, $r9, $r8, $r7, $r6, $r5, $sp\l  REGION_BOUNDARY\l  frame-setup PUSH16r killed $r5, implicit-def $sp, implicit $sp\l  frame-setup CFI_INSTRUCTION def_cfa_offset 4\l  frame-setup PUSH16r killed $r6, implicit-def $sp, implicit $sp\l  frame-setup CFI_INSTRUCTION def_cfa_offset 6\l  frame-setup PUSH16r killed $r7, implicit-def $sp, implicit $sp\l  frame-setup CFI_INSTRUCTION def_cfa_offset 8\l  frame-setup PUSH16r killed $r8, implicit-def $sp, implicit $sp\l  frame-setup CFI_INSTRUCTION def_cfa_offset 10\l  frame-setup PUSH16r killed $r9, implicit-def $sp, implicit $sp\l  frame-setup CFI_INSTRUCTION def_cfa_offset 12\l  frame-setup PUSH16r killed $r10, implicit-def $sp, implicit $sp\l  CKPTR1_0 $sp\l  frame-setup CFI_INSTRUCTION def_cfa_offset 14\l  CFI_INSTRUCTION offset $r5, -4\l  CFI_INSTRUCTION offset $r6, -6\l  CFI_INSTRUCTION offset $r7, -8\l  CFI_INSTRUCTION offset $r8, -10\l  CFI_INSTRUCTION offset $r9, -12\l  CFI_INSTRUCTION offset $r10, -14\l  $r7 = MOV16rr $r15\l  CKPTR7_0 $r7\l  $r10 = MOV16rr $r14\l  CKPTR10_0 $r10\l  $r9 = MOV16rr $r13\l  CKPTR9_0 $r9\l  $r8 = MOV16rr $r12\l  CKPTR8_0 $r8\l  $r12 = MOV16rr $r7\l  $r12 = RRA16r killed $r12(tied-def 0), implicit-def dead $sr\l  $r12 = RRA16r killed $r12(tied-def 0), implicit-def dead $sr\l  $r12 = ADD16rr killed $r12(tied-def 0), $r7, implicit-def dead $sr\l  $r13 = MOV16rm $sp, 14 :: (load (s16) from %fixed-stack.0)\l  $r13 = SUB16rr killed $r13(tied-def 0), killed $r12, implicit-def dead $sr\l  BIT16ri $r7, 3, implicit-def $sr\l  $r6 = MOV16rr $sr\l  $r6 = RRA16r killed $r6(tied-def 0), implicit-def dead $sr\l  $r6 = AND16rc killed $r6(tied-def 0), 1, implicit-def dead $sr\l  $r6 = ADD16rr killed $r6(tied-def 0), killed $r13, implicit-def dead $sr\l  CKPTR6_1 $r6\l  CMP16rc $r6, 1, implicit-def $sr\l  JCC %bb.2, 5, implicit $sr\l}"];
	Node0x56013c3d6f20 -> Node0x56013c3d7020;
	Node0x56013c3d6f20 -> Node0x56013c3d7120;
	Node0x56013c3d7020 [shape=record,label="{bb.1.for.body.preheader:\l; predecessors: %bb.0\l  successors: %bb.9(0x80000000); %bb.9(100.00%)\l  liveins: $sp, $r9, $r10, $r7, $r8, $r6\l  $r12 = MOV16rr $r8\l  CKPTR12_1 $r12\l  $r13 = MOV16ri 32\l  CKPTR13_1 $r13\l  $r14 = MOV16rr $r6\l  CKPTR14_1 $r14\l}"];
	Node0x56013c3d7020 -> Node0x56013c3de3f0;
	Node0x56013c3de3f0 [shape=record,label="{bb.9.for.body.preheader:\l; predecessors: %bb.1\l  successors: %bb.10(0x80000000); %bb.10(100.00%)\l  liveins: $sp, $r9, $r10, $r7, $r8, $r6, $r12, $r13, $r14\l  REGION_BOUNDARY\l  CALLi &memset, implicit-def dead $r11, implicit-def dead $r12, implicit-def dead $r13, implicit-def dead $r14, implicit-def dead $r15, implicit-def dead $sr, implicit $sp, implicit $r12, implicit $r13, implicit $r14\l}"];
	Node0x56013c3de3f0 -> Node0x56013c3de4f0;
	Node0x56013c3de4f0 [shape=record,label="{bb.10.for.body.preheader:\l; predecessors: %bb.9\l  successors: %bb.2(0x80000000); %bb.2(100.00%)\l  liveins: $sp, $r9, $r10, $r7, $r8, $r6\l  REGION_BOUNDARY\l  $r8 = ADD16rr killed $r8(tied-def 0), killed $r6, implicit-def dead $sr\l  CKPTR8_0 $r8\l}"];
	Node0x56013c3de4f0 -> Node0x56013c3d7120;
	Node0x56013c3d7120 [shape=record,label="{bb.2.while.cond.preheader:\l; predecessors: %bb.0, %bb.10\l  successors: %bb.3(0x50000000), %bb.8(0x30000000); %bb.3(62.50%), %bb.8(37.50%)\l  liveins: $sp, $r9, $r10, $r8, $r7\l  CMP16rc $r7, 1, implicit-def $sr\l  JCC %bb.8, 5, implicit $sr\l}"];
	Node0x56013c3d7120 -> Node0x56013c3d7288;
	Node0x56013c3d7120 -> Node0x56013c3d77c0;
	Node0x56013c3d7288 [shape=record,label="{bb.3.while.body.preheader:\l; predecessors: %bb.2\l  successors: %bb.5(0x80000000); %bb.5(100.00%)\l  liveins: $sp, $r9, $r10, $r8, $r7\l  $r7 = ADD16rc killed $r7(tied-def 0), -1, implicit-def dead $sr\l  CKPTR7_1 $r7\l  JMP %bb.5\l}"];
	Node0x56013c3d7288 -> Node0x56013c3d7388;
	Node0x56013c3d7658 [shape=record,label="{bb.4.if.end:\l; predecessors: %bb.6, %bb.7, %bb.12\l  successors: %bb.5(0x7c000000), %bb.8(0x04000000); %bb.5(96.88%), %bb.8(3.12%)\l  liveins: $sp, $r8, $r6, $r9, $r10\l  $r7 = MOV16rr $r6\l  $r7 = ADD16rc killed $r7(tied-def 0), -1, implicit-def dead $sr\l  CKPTR7_1 $r7\l  $r6 = ADD16rc killed $r6(tied-def 0), 1, implicit-def dead $sr\l  CMP16rc killed $r6, 2, implicit-def $sr\l  JCC %bb.8, 5, implicit $sr\l}"];
	Node0x56013c3d7658 -> Node0x56013c3d7388;
	Node0x56013c3d7658 -> Node0x56013c3d77c0;
	Node0x56013c3d7388 [shape=record,label="{bb.5.while.body:\l; predecessors: %bb.3, %bb.4\l  successors: %bb.11(0x80000000); %bb.11(100.00%)\l  liveins: $sp, $r9, $r7, $r8, $r10\l  REGION_BOUNDARY\l  $r5 = MOV16rr $r8\l  CKPTR5_0 $r5\l  $r6 = MOV16rr killed $r7\l  CKPTR6_0 $r6\l  $r14 = MOV16rr $r6\l  $r14 = ZEXT16r killed $r14(tied-def 0)\l  CKPTR14_1 $r14\l  $r12 = MOV16rr $r9\l  CKPTR12_1 $r12\l  $r13 = MOV16rr $r10\l  CKPTR13_1 $r13\l}"];
	Node0x56013c3d7388 -> Node0x56013c3de2f0;
	Node0x56013c3de2f0 [shape=record,label="{bb.11.while.body:\l; predecessors: %bb.5\l  successors: %bb.12(0x80000000); %bb.12(100.00%)\l  liveins: $sp, $r6, $r5, $r8, $r12, $r13, $r14, $r10, $r9\l  REGION_BOUNDARY\l  CALLi &__mspabi_srll, implicit-def dead $r11, implicit-def $r12, implicit-def dead $r13, implicit-def dead $r14, implicit-def dead $r15, implicit-def dead $sr, implicit $sp, implicit $r12, implicit $r13, implicit $r14\l  CKPTR12_0 $r12\l}"];
	Node0x56013c3de2f0 -> Node0x56013c3f5d90;
	Node0x56013c3f5d90 [shape=record,label="{bb.12.while.body:\l; predecessors: %bb.11\l  successors: %bb.6(0x60000000), %bb.4(0x20000000); %bb.6(75.00%), %bb.4(25.00%)\l  liveins: $sp, $r6, $r5, $r8, $r12, $r9, $r10\l  REGION_BOUNDARY\l  $r12b = AND8rc $r12b(tied-def 0), 1, implicit-def dead $sr, implicit killed $r12, implicit-def $r12\l  $r12b = BIS8ri $r12b(tied-def 0), 48, implicit-def dead $sr, implicit killed $r12, implicit-def $r12\l  MOV8mr $r5, 0, $r12b, implicit killed $r12 :: (store (s8) into %ir.str.addr.126, !tbaa !2)\l  $r8 = nuw ADD16rc killed $r8(tied-def 0), 1, implicit-def dead $sr\l  CKPTR8_0 $r8\l  CMP16rc $r6, 0, implicit-def $sr\l  JCC %bb.4, 0, implicit $sr\l}"];
	Node0x56013c3f5d90 -> Node0x56013c3e0550;
	Node0x56013c3f5d90 -> Node0x56013c3d7658;
	Node0x56013c3e0550 [shape=record,label="{bb.6.while.body:\l; predecessors: %bb.12\l  successors: %bb.7(0x55555555), %bb.4(0x2aaaaaab); %bb.7(66.67%), %bb.4(33.33%)\l  liveins: $sp, $r6, $r5, $r8, $r10, $r9\l  $r12 = MOV16rr $r6\l  $r12 = AND16ri killed $r12(tied-def 0), 3, implicit-def dead $sr\l  CMP16rc killed $r12, 0, implicit-def $sr\l  JCC %bb.4, 1, implicit $sr\l}"];
	Node0x56013c3e0550 -> Node0x56013c3d7558;
	Node0x56013c3e0550 -> Node0x56013c3d7658;
	Node0x56013c3d7558 [shape=record,label="{bb.7.if.then:\l; predecessors: %bb.6\l  successors: %bb.4(0x80000000); %bb.4(100.00%)\l  liveins: $sp, $r6, $r5, $r10, $r9\l  MOV8mi $r5, 1, 32 :: (store (s8) into %ir.sunkaddr, !tbaa !2)\l  $r5 = nuw ADD16rc killed $r5(tied-def 0), 2, implicit-def dead $sr\l  $r8 = MOV16rr killed $r5\l  CKPTR8_0 $r8\l  JMP %bb.4\l}"];
	Node0x56013c3d7558 -> Node0x56013c3d7658;
	Node0x56013c3d77c0 [shape=record,label="{bb.8.while.end:\l; predecessors: %bb.4, %bb.2\l  liveins: $sp, $r8\l  REGION_BOUNDARY\l  MOV8mc killed $r8, 0, 0 :: (store (s8) into %ir.str.addr.1.lcssa, !tbaa !2)\l  $r10 = frame-destroy POP16r implicit-def $sp, implicit $sp\l  frame-destroy CFI_INSTRUCTION def_cfa_offset 12\l  $r9 = frame-destroy POP16r implicit-def $sp, implicit $sp\l  frame-destroy CFI_INSTRUCTION def_cfa_offset 10\l  $r8 = frame-destroy POP16r implicit-def $sp, implicit $sp\l  frame-destroy CFI_INSTRUCTION def_cfa_offset 8\l  $r7 = frame-destroy POP16r implicit-def $sp, implicit $sp\l  frame-destroy CFI_INSTRUCTION def_cfa_offset 6\l  $r6 = frame-destroy POP16r implicit-def $sp, implicit $sp\l  frame-destroy CFI_INSTRUCTION def_cfa_offset 4\l  $r5 = frame-destroy POP16r implicit-def $sp, implicit $sp\l  frame-destroy CFI_INSTRUCTION def_cfa_offset 2\l  CFI_INSTRUCTION restore $r5\l  CFI_INSTRUCTION restore $r6\l  CFI_INSTRUCTION restore $r7\l  CFI_INSTRUCTION restore $r8\l  CFI_INSTRUCTION restore $r9\l  CFI_INSTRUCTION restore $r10\l  RET\l}"];
}
